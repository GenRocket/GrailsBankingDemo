package com.genrocket.bank

import groovy.time.TimeCategory
import org.springframework.transaction.annotation.Transactional

/**
 * Generated By GenRocket 10/16/2016.
 */
@Transactional
class CardService {
  def cardPoolService

  def parseFullName(User user) {
    String fullName = null

    if (user.middleInitial)
      fullName = "${user.title} ${user.firstName} ${user.middleInitial}. ${user.lastName} ${user.suffix}"
    else
      fullName = "${user.title} ${user.firstName} ${user.lastName} ${user.suffix}"

    return fullName.trim()
  }

  def createSecurityCode() {
    Random rand = new Random()
    Integer max = 999
    Integer code = rand.nextInt(max + 1)

    return (code < 100) ? code + 100 : code
  }

  def save(CardType cardType, Customer customer) {
    use(TimeCategory) {
      Date dateIssued = new Date()
      Date dateExpired = dateIssued + 3.years

      Card card = new Card(
        dateIssued: dateIssued,
        dateExpired: dateExpired,
        enabled: true,
        nameOnCard: parseFullName(customer.user),
        cardNumber: cardPoolService.nextCardNumber(),
        securityCode: createSecurityCode(),
        cardType: cardType,
        customer: customer
      )

      card.save()
    }
  }

  def update(Card card) {
    card.save()
  }

  def delete(Card card) {
    card.delete()
  }

  def cardValidation(String cardNumber, Integer pinNumber) {
    Card card = Card.findByCardNumber(cardNumber)

    if (!card) {
      return CardValidationTypes.CARD_INVALID
    }

    if (!card.enabled) {
      return CardValidationTypes.CARD_NOT_ENABLED
    }

    if (card.dateExpired) {
      return CardValidationTypes.CARD_EXPIRED
    }

    if (card.dateDeactivated) {
      return CardValidationTypes.CARD_DEACTIVATED
    }

    if (card.pinNumber != pinNumber) {
      return CardValidationTypes.PIN_INVALID
    }

    return CardValidationTypes.CARD_VALIDATED
  }
}
    