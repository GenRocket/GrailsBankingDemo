package com.genrocket.bank

import com.genrocket.bank.util.AccountUtil
import org.springframework.transaction.annotation.Transactional

/**
 * Generated By GenRocket 10/16/2016.
 */
@Transactional
class AccountService {
  def customerService
  def cardService

  Account save(User user, Branch branch, CardType cardType, AccountType accountType, CustomerLevel customerLevel) {
    Account account = new Account(
      accountNumber: AccountUtil.generateAccountNumber(),
      branch: branch,
      accountType: accountType
    )

    account.save()

    if (!account.hasErrors()) {
      Customer customer = new Customer(
        enabled: false,
        user: user,
        account: account,
        customerLevel: customerLevel
      )

      customerService.save(customer)

      if (!customer.hasErrors()) {
        cardService.save(cardType, customer)
      }
    }

    return account
  }

  Boolean checkOverdraftAllowed(User user, Account account) {
    Customer customer = Customer.findByUserAndAccount(user, account)

    if (customer) {
      CustomerLevel customerLevel = customer.customerLevel
      return customerLevel.overdraftAllowed
    } else {
      return false
    }
  }

  List<Account> findAccounts(User user, AccountType accountType) {
    List<Customer> customers = Customer.findAllByUser(user)
    List<Account> accounts = []

    customers.each { node ->
      if (node.account.accountType == accountType) {
        accounts.add(node.account)
      }
    }

    return accounts
  }

  Boolean hasEnabledCustomer(Account account) {
    def customers = Customer.where {
      account == account && enabled
    }

    return customers.size() > 0
  }
}
    