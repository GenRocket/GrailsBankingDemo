package com.genrocket.bank

import com.genrocket.bank.util.AccountUtil
import org.springframework.transaction.annotation.Transactional

/**
 * Generated By GenRocket 10/16/2016.
 */
@Transactional
class AccountService {
  def customerService
  def accountService
  def checkingService
  def savingsService
  def userService

  public void openAccountWithDeposit(User user, Branch branch, CustomerLevel customerLevel, Float checking, Float savings) {
    userService.save(user)

    CardType cardType = CardType.findByName('Visa Debit')

    if (checking) {
      AccountType accountType = AccountType.findByName('Checking')
      Account account = accountService.save(user, branch, cardType, accountType, customerLevel)
      checkingService.deposit(user, account, checking)
    }

    if (savings) {
      AccountType accountType = AccountType.findByName('Savings')
      Account account = accountService.save(user, branch, cardType, accountType, customerLevel)
      savingsService.deposit(user, account, savings)
    }
  }

  Account save(User user, Branch branch, CardType cardType, AccountType accountType, CustomerLevel customerLevel) {
    Account account = new Account(
      accountNumber: AccountUtil.generateAccountNumber(),
      branch: branch,
      accountType: accountType
    )

    account.save()

    if (!account.hasErrors()) {
      customerService.createCustomer(user, account, customerLevel, cardType)
    }

    return account
  }

  Boolean checkOverdraftAllowed(User user, Account account) {
    Customer customer = Customer.findByUserAndAccount(user, account)

    if (customer) {
      CustomerLevel customerLevel = customer.customerLevel
      return customerLevel.overdraftAllowed
    } else {
      return false
    }
  }

  List<Account> findAccounts(User user, AccountType accountType) {
    List<Customer> customers = Customer.findAllByUser(user)
    List<Account> accounts = []

    customers.each { node ->
      if (node.account.accountType == accountType) {
        accounts.add(node.account)
      }
    }

    return accounts
  }

  Boolean hasEnabledCustomer(Account account) {
    List<Customer> customers = Customer.findAllByAccount(account)
    Boolean found = false

    customers.each { customer ->
      if (customer.enabled) {
        found = true
      }
    }

    return found
  }
}
    