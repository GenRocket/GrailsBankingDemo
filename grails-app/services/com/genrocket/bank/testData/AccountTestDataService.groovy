package com.genrocket.bank.testData

import com.genRocket.tdl.LoaderDTO
import org.springframework.transaction.annotation.Transactional

import com.genrocket.bank.testDataLoader.AccountTestDataLoader
import com.genrocket.bank.Account
import com.genrocket.bank.AccountType
import com.genrocket.bank.Branch

/**
 * Generated By GenRocket 10/16/2016.
 */
@Transactional
class AccountTestDataService {
  static transactional = true

  def accountService
  def accountTypeTestDataService
  def branchTestDataService

  def loadData(Integer loopCount = 1, Map<String, Object> domainMap = null) {
    println "Loading data for Account..."

    AccountType accountType = null
    Branch branch = null
    if (domainMap) {
      accountType = (AccountType) domainMap['accountType']
      branch = (Branch) domainMap['branch']
    }


    if (Account.count() == 0) {
      if (!accountType) {
        accountTypeTestDataService.loadData()
        accountType = AccountType.first()
      }

      if (!branch) {
        branchTestDataService.loadData()
        branch = Branch.first()
      }

      def accountList = (LoaderDTO[]) AccountTestDataLoader.load(loopCount)

      accountList.each { node ->
        def account = (Account) node.object

        account.accountType = accountType
        account.branch = branch
        accountService.save(account)
      }
    }
  }
}
    