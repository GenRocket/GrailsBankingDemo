package com.genrocket.bank

import com.genRocket.tdl.LoaderDTO
import grails.test.spock.IntegrationSpec
import com.genrocket.bank.testDataLoader.CustomerLevelTestDataLoader

/**
 * Generated By GenRocket 10/16/2016.
 */
class CustomerLevelServiceIntegrationSpec extends IntegrationSpec {
  def customerLevelTestDataService
  def customerLevelService

  void "create customerLevel"() {
    given:


    when:

    def customerLevelList = (List<LoaderDTO>) CustomerLevelTestDataLoader.load()
    def customerLevel = (CustomerLevel) customerLevelList.first().object

    customerLevelService.save(customerLevel)

    then:

    customerLevel.id
  }

  void "update customerLevel"() {
    given:

    customerLevelTestDataService.loadData()
    def customerLevel = CustomerLevel.first()
    def id = customerLevel.id

    when:

    customerLevel.name = 'TEST'
    customerLevelService.update(customerLevel)

    then:

    def temp = CustomerLevel.get(id)
    temp.name == 'TEST'
  }

  void "delete customerLevel"() {
    given:

    customerLevelTestDataService.loadData()
    def customerLevel = CustomerLevel.first()
    def id = customerLevel.id

    when:

    customerLevelService.delete(customerLevel)

    then:

    CustomerLevel.get(id) == null
  }


  void "test name for Null"() {
    given:

    customerLevelTestDataService.loadData()
    CustomerLevel customerLevel = CustomerLevel.first()
    customerLevel.name = null

    when:

    customerLevelService.update(customerLevel);

    then:

    customerLevel.errors.getFieldError("name").code == "nullable"

  }

  void "test dailyWithdrawalLimit for Null"() {
    given:

    customerLevelTestDataService.loadData()
    CustomerLevel customerLevel = CustomerLevel.first()
    customerLevel.dailyWithdrawalLimit = null

    when:

    customerLevelService.update(customerLevel);

    then:

    customerLevel.errors.getFieldError("dailyWithdrawalLimit").code == "nullable"

  }

  void "test monthlyMaxTransfersAllowed for Null"() {
    given:

    customerLevelTestDataService.loadData()
    CustomerLevel customerLevel = CustomerLevel.first()
    customerLevel.monthlyMaxTransfersAllowed = null

    when:

    customerLevelService.update(customerLevel);

    then:

    customerLevel.errors.getFieldError("monthlyMaxTransfersAllowed").code == "nullable"

  }

  void "test overdraftAllowed for Null"() {
    given:

    customerLevelTestDataService.loadData()
    CustomerLevel customerLevel = CustomerLevel.first()
    customerLevel.overdraftAllowed = null

    when:

    customerLevelService.update(customerLevel);

    then:

    customerLevel.errors.getFieldError("overdraftAllowed").code == "nullable"

  }

  void "test name for unique"() {
    given:


    def customerLevelList = (List<LoaderDTO>) CustomerLevelTestDataLoader.load(2)
    def customerLevel = (CustomerLevel) customerLevelList.first().object

    def temp = customerLevel.name;

    when:

    customerLevelService.save(customerLevel);

    def testCustomerLevel = (CustomerLevel) customerLevelList[1].object
    testCustomerLevel.name = temp;

    customerLevelService.save(testCustomerLevel);

    then:

    testCustomerLevel.errors.getFieldError("name").code == "unique"
  }
}
    