package com.genrocket.bank

import grails.test.spock.IntegrationSpec
import groovy.time.TimeCategory

/**
 * Generated By GenRocket 10/16/2016.
 */
class CardServiceIntegrationSpec extends IntegrationSpec {
  def cardTestDataService
  def cardService
  def cardTypeTestDataService
  def customerTestDataService
  def cardPoolTestDataService

  void "create card"() {
    given:

    cardPoolTestDataService.loadData(100)

    cardTypeTestDataService.loadData()
    def cardType = CardType.first()

    customerTestDataService.loadData()
    def customer = Customer.first()

    when:

    cardService.save(cardType, customer)

    then:

    Card card = Card.findByCardTypeAndCustomer(cardType, customer)
    card.id
    card.cardType == cardType
    card.customer == customer

    card.enabled
    card.cardNumber
    card.nameOnCard
    card.securityCode
    card.dateIssued
    card.dateExpired

    use(TimeCategory) {
      card.dateExpired == card.dateIssued + 3.years
    }

    !card.pinNumber
    !card.dateActivated
    !card.dateDeactivated

  }

  void "update card"() {
    given:

    cardTestDataService.loadData()
    def card = Card.first()
    def id = card.id

    when:

    card.nameOnCard = 'TEST'
    cardService.update(card)

    then:

    def temp = Card.get(id)
    temp.nameOnCard == 'TEST'
  }

  void "delete card"() {
    given:

    cardTestDataService.loadData()
    def card = Card.first()
    def id = card.id

    when:

    cardService.delete(card)

    then:

    Card.get(id) == null
  }

  void "test cardNumber for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.cardNumber = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("cardNumber").code == "nullable"

  }

  void "test cardType for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.cardType = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("cardType").code == "nullable"

  }

  void "test customer for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.customer = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("customer").code == "nullable"

  }

  void "test dateExpired for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.dateExpired = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("dateExpired").code == "nullable"

  }

  void "test dateIssued for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.dateIssued = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("dateIssued").code == "nullable"

  }

  void "test enabled for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.enabled = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("enabled").code == "nullable"

  }

  void "test nameOnCard for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.nameOnCard = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("nameOnCard").code == "nullable"

  }

  void "test securityCode for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.securityCode = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("securityCode").code == "nullable"

  }

  void "test cardActivated INVALID_PIN_NUMBER when null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()

    when:

    TransactionStatus status = cardService.activateCard(card, null)

    then:

    status == TransactionStatus.INVALID_PIN_NUMBER

  }

  void "test cardActivated INVALID_PIN_NUMBER < 6 digits"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()

    when:

    TransactionStatus status = cardService.activateCard(card, 12345)

    then:

    status == TransactionStatus.INVALID_PIN_NUMBER

  }

  void "test cardActivated INVALID_PIN_NUMBER > 6 digits"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()

    when:

    TransactionStatus status = cardService.activateCard(card, 1234567)

    then:

    status == TransactionStatus.INVALID_PIN_NUMBER

  }

  void "test cardActivated CARD_ALREADY_ACTIVE"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()

    card.dateActivated = new Date()
    card.pinNumber = 123456
    card.save()

    when:

    TransactionStatus status = cardService.activateCard(card, 123456)

    then:

    status == TransactionStatus.CARD_ALREADY_ACTIVE

  }

  void "test cardActivated CARD_DEACTIVATED"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()

    card.dateDeactivated = new Date()
    card.save()

    when:

    TransactionStatus status = cardService.activateCard(card, 123456)

    then:

    status == TransactionStatus.CARD_DEACTIVATED

  }

  void "test cardActivated CARD_NOT_ENABLED"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()

    card.enabled = false
    card.save()

    when:

    TransactionStatus status = cardService.activateCard(card, 123456)

    then:

    status == TransactionStatus.CARD_NOT_ENABLED

  }

  void "test cardActivated TRANSACTION_COMPLETE"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()

    when:

    TransactionStatus status = cardService.activateCard(card, 123456)

    then:

    status == TransactionStatus.TRANSACTION_COMPLETE

  }

}
    