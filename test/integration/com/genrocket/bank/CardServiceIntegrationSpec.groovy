package com.genrocket.bank

import com.genRocket.tdl.LoaderDTO
import grails.test.spock.IntegrationSpec
import com.genrocket.bank.testDataLoader.CardTestDataLoader
import com.genrocket.bank.CardType
import com.genrocket.bank.Customer

/**
 * Generated By GenRocket 10/16/2016.
 */
class CardServiceIntegrationSpec extends IntegrationSpec {
  def cardTestDataService
  def cardService
  def cardTypeTestDataService
  def customerTestDataService

  void "create card"() {
    given:

    cardTypeTestDataService.loadData()
    def cardType = CardType.first()

    customerTestDataService.loadData()
    def customer = Customer.first()

    when:

    def cardList = (List<LoaderDTO>) CardTestDataLoader.load()
    def card = (Card) cardList.first().object

    card.cardType = cardType

    card.customer = customer

    cardService.save(card)

    then:

    card.id
  }

  void "update card"() {
    given:

    cardTestDataService.loadData()
    def card = Card.first()
    def id = card.id

    when:

    card.nameOnCard = 'TEST'
    cardService.update(card)

    then:

    def temp = Card.get(id)
    temp.nameOnCard == 'TEST'
  }

  void "delete card"() {
    given:

    cardTestDataService.loadData()
    def card = Card.first()
    def id = card.id

    when:

    cardService.delete(card)

    then:

    Card.get(id) == null
  }


  void "test activated for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.activated = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("activated").code == "nullable"

  }

  void "test cardNumber for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.cardNumber = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("cardNumber").code == "nullable"

  }

  void "test cardType for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.cardType = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("cardType").code == "nullable"

  }

  void "test customer for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.customer = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("customer").code == "nullable"

  }

  void "test dateExpired for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.dateExpired = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("dateExpired").code == "nullable"

  }

  void "test dateIssued for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.dateIssued = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("dateIssued").code == "nullable"

  }

  void "test enabled for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.enabled = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("enabled").code == "nullable"

  }

  void "test nameOnCard for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.nameOnCard = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("nameOnCard").code == "nullable"

  }

  void "test pinNumber for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.pinNumber = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("pinNumber").code == "nullable"

  }

  void "test securityCode for Null"() {
    given:

    cardTestDataService.loadData()
    Card card = Card.first()
    card.securityCode = null

    when:

    cardService.update(card);

    then:

    card.errors.getFieldError("securityCode").code == "nullable"

  }

  void "test cardNumber for unique"() {
    given:

    cardTypeTestDataService.loadData()
    def cardType = CardType.first()

    customerTestDataService.loadData()
    def customer = Customer.first()

    def cardList = (List<LoaderDTO>) CardTestDataLoader.load(2)
    def card = (Card) cardList.first().object

    def temp = card.cardNumber;

    card.cardType = cardType
    card.customer = customer
    when:

    cardService.save(card);

    def testCard = (Card) cardList[1].object
    testCard.cardNumber = temp;

    cardService.save(testCard);

    then:

    testCard.errors.getFieldError("cardNumber").code == "unique"
  }
}
    