package com.genrocket.bank

import com.genRocket.tdl.LoaderDTO
import com.genrocket.bank.testDataLoader.CardPoolTestDataLoader
import grails.test.spock.IntegrationSpec

/**
 * Generated By GenRocket 10/16/2016.
 */
class CardPoolServiceIntegrationSpec extends IntegrationSpec {
  def cardPoolTestDataService
  def cardPoolService

  void "create cardPool"() {
    given:


    when:

    def cardPoolList = (List<LoaderDTO>) CardPoolTestDataLoader.load()
    def cardPool = (CardPool) cardPoolList.first().object

    cardPoolService.save(cardPool)

    then:

    cardPool.id
  }

  void "test cardNumber for Null"() {
    given:

    cardPoolTestDataService.loadData()
    CardPool cardPool = CardPool.first()
    cardPool.cardNumber = null

    when:

    cardPool.save()

    then:

    cardPool.errors.getFieldError("cardNumber").code == "nullable"
  }

  void "test nextAvailable for Null"() {
    given:

    cardPoolTestDataService.loadData()
    CardPool cardPool = CardPool.first()
    cardPool.nextAvailable = null

    when:

    cardPool.save()

    then:

    cardPool.errors.getFieldError("nextAvailable").code == "nullable"
  }

  void "test used for Null"() {
    given:

    cardPoolTestDataService.loadData()
    CardPool cardPool = CardPool.first()
    cardPool.used = null

    when:

    cardPool.save()

    then:

    cardPool.errors.getFieldError("used").code == "nullable"

  }

  void "test cardNumber for unique"() {
    given:


    def cardPoolList = (List<LoaderDTO>) CardPoolTestDataLoader.load(2)
    def cardPool = (CardPool) cardPoolList.first().object

    def temp = cardPool.cardNumber;

    when:

    cardPoolService.save(cardPool);

    def testCardPool = (CardPool) cardPoolList[1].object
    testCardPool.cardNumber = temp;

    cardPoolService.save(testCardPool);

    then:

    testCardPool.errors.getFieldError("cardNumber").code == "unique"
  }

  void "test nextCardNumber get first card"() {
    given:

    cardPoolTestDataService.loadData(3)

    when:

    String cardNumber1 = cardPoolService.nextCardNumber()

    CardPool[] cardPoolList = CardPool.findAll() as CardPool[]
    CardPool cardPool1 = cardPoolList[0]
    CardPool cardPool2 = cardPoolList[1]

    then:

    cardPool1.cardNumber == cardNumber1
    cardPool1.used
    !cardPool1.nextAvailable

    !cardPool2.used
    cardPool2.nextAvailable

  }

  void "test nextCardNumber get second card"() {
    given:

    cardPoolTestDataService.loadData(3)

    when:

    String cardNumber1 = cardPoolService.nextCardNumber()
    String cardNumber2 = cardPoolService.nextCardNumber()

    CardPool[] cardPoolList = CardPool.findAll() as CardPool[]
    CardPool cardPool1 = cardPoolList[0]
    CardPool cardPool2 = cardPoolList[1]
    CardPool cardPool3 = cardPoolList[2]

    then:

    cardPool1.cardNumber == cardNumber1
    cardPool1.used
    !cardPool1.nextAvailable

    cardPool2.cardNumber == cardNumber2
    cardPool2.used
    !cardPool2.nextAvailable

    !cardPool3.used
    cardPool3.nextAvailable

  }

  void "test nextCardNumber get third card"() {
    given:

    cardPoolTestDataService.loadData(3)

    when:

    String cardNumber1 = cardPoolService.nextCardNumber()
    String cardNumber2 = cardPoolService.nextCardNumber()
    String cardNumber3 = cardPoolService.nextCardNumber()

    CardPool[] cardPoolList = CardPool.findAll() as CardPool[]
    CardPool cardPool1 = cardPoolList[0]
    CardPool cardPool2 = cardPoolList[1]
    CardPool cardPool3 = cardPoolList[2]

    then:

    cardPool1.cardNumber == cardNumber1
    cardPool1.used
    !cardPool1.nextAvailable

    cardPool2.cardNumber == cardNumber2
    cardPool2.used
    !cardPool2.nextAvailable

    cardPool3.cardNumber == cardNumber3
    cardPool3.used
    !cardPool3.nextAvailable
  }

  void "test nextCardNumber out of cards"() {
    given:

    cardPoolTestDataService.loadData(3)

    when:

    String cardNumber1 = cardPoolService.nextCardNumber()
    String cardNumber2 = cardPoolService.nextCardNumber()
    String cardNumber3 = cardPoolService.nextCardNumber()
    String cardNumber4 = cardPoolService.nextCardNumber()

    then:

    cardNumber1
    cardNumber2
    cardNumber3
    !cardNumber4
  }
}
    