package com.genrocket.bank

import com.genRocket.tdl.LoaderDTO
import com.genrocket.bank.testDataLoader.CustomerTestDataLoader
import grails.test.spock.IntegrationSpec

/**
 * Generated By GenRocket 10/16/2016.
 */
class CustomerServiceIntegrationSpec extends IntegrationSpec {
  def accountService
  def customerService
  def userTestDataService
  def accountTestDataService
  def transactionCreatorService
  def customerLevelTestDataService

  void "create customer"() {
    given:

    accountTestDataService.loadData()
    def account = Account.first()

    customerLevelTestDataService.loadData()
    def customerLevel = CustomerLevel.first()

    userTestDataService.loadData()
    def user = User.first()

    when:

    def customerList = (List<LoaderDTO>) CustomerTestDataLoader.load()
    def customer = (Customer) customerList.first().object

    customer.account = account

    customer.customerLevel = customerLevel

    customer.user = user

    customerService.save(customer)

    then:

    customer.id
  }

  void "test findCustomers one account"() {
    given:

    transactionCreatorService.createCheckingAndSavingsAccounts(2)
    Map info = transactionCreatorService.getUserAccountInformation(1)

    User user = (User) info['user']
    AccountType accountType = (AccountType) info['checkingType']
    Customer customer = (Customer) info['checkingCustomer']

    when:

    List<Customer> customers = customerService.findCustomers(user, accountType)

    then:

    customers.size() == 1
    customers.getAt(0) == customer
  }

  void "test findCustomers multiple accounts"() {
    given:

    transactionCreatorService.createCheckingAndSavingsAccounts(2)
    Map info = transactionCreatorService.getUserAccountInformation(1)

    User user = (User) info['user']
    Branch branch = (Branch) info['branch']
    CardType cardType = (CardType) info['cardType']
    AccountType savingsType = (AccountType) info['savingsType']
    AccountType checkingType = (AccountType) info['checkingType']
    CustomerLevel customerLevel = (CustomerLevel) info['customerLevel']

    accountService.save(user, branch, cardType, checkingType, customerLevel)
    accountService.save(user, branch, cardType, savingsType, customerLevel)

    accountService.save(user, branch, cardType, checkingType, customerLevel)
    accountService.save(user, branch, cardType, savingsType, customerLevel)

    when:

    List<Customer> customers = customerService.findCustomers(user, checkingType)

    then:

    customers.size() == 3
  }
}
    