package com.genrocket.bank

import com.genRocket.tdl.LoaderDTO
import com.genrocket.bank.testDataLoader.CustomerTestDataLoader
import grails.test.spock.IntegrationSpec

/**
 * Generated By GenRocket 10/16/2016.
 */
class CustomerServiceIntegrationSpec extends IntegrationSpec {
  def customerTestDataService
  def customerService
  def accountTestDataService
  def customerLevelTestDataService
  def userTestDataService

  void "create customer"() {
    given:

    accountTestDataService.loadData()
    def account = Account.first()

    customerLevelTestDataService.loadData()
    def customerLevel = CustomerLevel.first()

    userTestDataService.loadData()
    def user = User.first()

    when:

    def customerList = (List<LoaderDTO>) CustomerTestDataLoader.load()
    def customer = (Customer) customerList.first().object

    customer.account = account

    customer.customerLevel = customerLevel

    customer.user = user

    customerService.save(customer)

    then:

    customer.id
  }

  void "update customer"() {
    given:

    customerTestDataService.loadData()
    def customer = Customer.first()
    def id = customer.id

    when:

    Boolean enabled = customer.enabled ? false : true
    customer.enabled = enabled
    customerService.update(customer)

    then:

    def temp = Customer.get(id)
    temp.enabled == enabled
  }

  void "delete customer"() {
    given:

    customerTestDataService.loadData()
    def customer = Customer.first()
    def id = customer.id

    when:

    customerService.delete(customer)

    then:

    Customer.get(id) == null
  }


  void "test account for Null"() {
    given:

    customerTestDataService.loadData()
    Customer customer = Customer.first()
    customer.account = null

    when:

    customerService.update(customer);

    then:

    customer.errors.getFieldError("account").code == "nullable"

  }

  void "test customerLevel for Null"() {
    given:

    customerTestDataService.loadData()
    Customer customer = Customer.first()
    customer.customerLevel = null

    when:

    customerService.update(customer);

    then:

    customer.errors.getFieldError("customerLevel").code == "nullable"

  }

  void "test enabled for Null"() {
    given:

    customerTestDataService.loadData()
    Customer customer = Customer.first()
    customer.enabled = null

    when:

    customerService.update(customer);

    then:

    customer.errors.getFieldError("enabled").code == "nullable"

  }

  void "test user for Null"() {
    given:

    customerTestDataService.loadData()
    Customer customer = Customer.first()
    customer.user = null

    when:

    customerService.update(customer);

    then:

    customer.errors.getFieldError("user").code == "nullable"

  }
}
    