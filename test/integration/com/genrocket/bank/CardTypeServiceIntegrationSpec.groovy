package com.genrocket.bank

import com.genRocket.tdl.LoaderDTO
import com.genrocket.bank.testDataLoader.CardTypeTestDataLoader
import grails.test.spock.IntegrationSpec

/**
 * Generated By GenRocket 10/16/2016.
 */
class CardTypeServiceIntegrationSpec extends IntegrationSpec {
  def cardTypeTestDataService
  def cardTypeService

  void "create cardType"() {
    given:


    when:

    def cardTypeList = (List<LoaderDTO>) CardTypeTestDataLoader.load()
    def cardType = (CardType) cardTypeList.first().object

    cardTypeService.save(cardType)

    then:

    cardType.id
  }

  void "update cardType"() {
    given:

    cardTypeTestDataService.loadData()
    def cardType = CardType.first()
    def id = cardType.id

    when:

    cardType.name = 'TEST'
    cardTypeService.update(cardType)

    then:

    def temp = CardType.get(id)
    temp.name == 'TEST'
  }

  void "delete cardType"() {
    given:

    cardTypeTestDataService.loadData()
    def cardType = CardType.first()
    def id = cardType.id

    when:

    cardTypeService.delete(cardType)

    then:

    CardType.get(id) == null
  }


  void "test name for Null"() {
    given:

    cardTypeTestDataService.loadData()
    CardType cardType = CardType.first()
    cardType.name = null

    when:

    cardTypeService.update(cardType);

    then:

    cardType.errors.getFieldError("name").code == "nullable"

  }

  void "test name for unique"() {
    given:


    def cardTypeList = (List<LoaderDTO>) CardTypeTestDataLoader.load(2)
    def cardType = (CardType) cardTypeList.first().object

    def temp = cardType.name;

    when:

    cardTypeService.save(cardType);

    def testCardType = (CardType) cardTypeList[1].object
    testCardType.name = temp;

    cardTypeService.save(testCardType);

    then:

    testCardType.errors.getFieldError("name").code == "unique"
  }
}
    