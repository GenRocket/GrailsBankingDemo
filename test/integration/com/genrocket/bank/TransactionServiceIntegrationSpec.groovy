
package com.genrocket.bank

import com.genRocket.tdl.LoaderDTO
import grails.test.spock.IntegrationSpec
import com.genrocket.bank.testDataLoader.TransactionTestDataLoader
import com.genrocket.bank.Account
import com.genrocket.bank.TransactionType
import com.genrocket.bank.User

/**
 * Generated By GenRocket 10/18/2016.
 */
class TransactionServiceIntegrationSpec extends IntegrationSpec {
  def transactionTestDataService
  def transactionService
  def accountTestDataService
  def transactionTypeTestDataService
  def userTestDataService

  void "create transaction"() {
    given:

    accountTestDataService.loadData()
    def account = Account.first()

    transactionTypeTestDataService.loadData()
    def transactionType = TransactionType.first()

    userTestDataService.loadData()
    def user = User.first()

    when:

    def transactionList = (List<LoaderDTO>) TransactionTestDataLoader.load()
    def transaction = (Transaction) transactionList.first().object

    transaction.account = account

    transaction.transactionType = transactionType

    transaction.user = user

    transactionService.save(transaction)

    then:

    transaction.id
  }

  void "update transaction"() {
    given:

    transactionTestDataService.loadData()
    def transaction = Transaction.first()
    def id = transaction.id

    when:

    Integer amount = transaction.amount + 1000
    transaction.amount = amount
    transactionService.update(transaction)

    then:

    def temp = Transaction.get(id)
    temp.amount == amount
  }

  void "delete transaction"() {
    given:

    transactionTestDataService.loadData()
    def transaction = Transaction.first()
    def id = transaction.id

    when:

    transactionService.delete(transaction)

    then:

    Transaction.get(id) == null
  }


  void "test account for Null"() {
    given:

    transactionTestDataService.loadData()
    Transaction transaction = Transaction.first()
    transaction.account = null

    when:

    transactionService.update(transaction);

    then:

    transaction.errors.getFieldError("account").code == "nullable"

  }

  void "test amount for Null"() {
    given:

    transactionTestDataService.loadData()
    Transaction transaction = Transaction.first()
    transaction.amount = null

    when:

    transactionService.update(transaction);

    then:

    transaction.errors.getFieldError("amount").code == "nullable"

  }

  void "test transactionType for Null"() {
    given:

    transactionTestDataService.loadData()
    Transaction transaction = Transaction.first()
    transaction.transactionType = null

    when:

    transactionService.update(transaction);

    then:

    transaction.errors.getFieldError("transactionType").code == "nullable"

  }

  void "test user for Null"() {
    given:

    transactionTestDataService.loadData()
    Transaction transaction = Transaction.first()
    transaction.user = null

    when:

    transactionService.update(transaction);

    then:

    transaction.errors.getFieldError("user").code == "nullable"

  }
}
    