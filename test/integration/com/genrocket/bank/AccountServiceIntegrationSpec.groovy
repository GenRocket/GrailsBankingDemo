package com.genrocket.bank

import com.genRocket.tdl.LoaderDTO
import grails.test.spock.IntegrationSpec
import com.genrocket.bank.testDataLoader.AccountTestDataLoader
import com.genrocket.bank.AccountType
import com.genrocket.bank.Branch

/**
 * Generated By GenRocket 10/16/2016.
 */
class AccountServiceIntegrationSpec extends IntegrationSpec {
  def accountTestDataService
  def accountService
  def accountTypeTestDataService
  def branchTestDataService

  void "create account"() {
    given:

    accountTypeTestDataService.loadData()
    def accountType = AccountType.first()

    branchTestDataService.loadData()
    def branch = Branch.first()

    when:

    def accountList = (List<LoaderDTO>) AccountTestDataLoader.load()
    def account = (Account) accountList.first().object

    account.accountType = accountType

    account.branch = branch

    accountService.save(account)

    then:

    account.id
  }

  void "update account"() {
    given:

    accountTestDataService.loadData()
    def account = Account.first()
    def id = account.id

    when:

    Integer balance = account.balance + 1000
    account.balance = balance
    accountService.update(account)

    then:

    def temp = Account.get(id)
    temp.balance == balance
  }

  void "delete account"() {
    given:

    accountTestDataService.loadData()
    def account = Account.first()
    def id = account.id

    when:

    accountService.delete(account)

    then:

    Account.get(id) == null
  }


  void "test accountType for Null"() {
    given:

    accountTestDataService.loadData()
    Account account = Account.first()
    account.accountType = null

    when:

    accountService.update(account);

    then:

    account.errors.getFieldError("accountType").code == "nullable"

  }

  void "test balance for Null"() {
    given:

    accountTestDataService.loadData()
    Account account = Account.first()
    account.balance = null

    when:

    accountService.update(account);

    then:

    account.errors.getFieldError("balance").code == "nullable"

  }

  void "test branch for Null"() {
    given:

    accountTestDataService.loadData()
    Account account = Account.first()
    account.branch = null

    when:

    accountService.update(account);

    then:

    account.errors.getFieldError("branch").code == "nullable"

  }
}
    