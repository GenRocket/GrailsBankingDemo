package com.genrocket.bank

import com.genRocket.tdl.LoaderDTO
import com.genrocket.bank.testDataLoader.AccountTestDataLoader
import grails.test.spock.IntegrationSpec

/**
 * Generated By GenRocket 10/16/2016.
 */
class AccountServiceIntegrationSpec extends IntegrationSpec {
  def accountService
  def customerLevelService
  def accountTestDataService
  def customerTestDataService
  def accountTypeTestDataService
  def branchTestDataService

  void "update account"() {
    given:

    accountTestDataService.loadData()
    def account = Account.first()
    def id = account.id

    when:

    Integer balance = account.balance + 1000
    account.balance = balance
    accountService.update(account)

    then:

    def temp = Account.get(id)
    temp.balance == balance
  }

  void "delete account"() {
    given:

    accountTestDataService.loadData()
    def account = Account.first()
    def id = account.id

    when:

    accountService.delete(account)

    then:

    Account.get(id) == null
  }


  void "test accountType for Null"() {
    given:

    accountTestDataService.loadData()
    Account account = Account.first()
    account.accountType = null

    when:

    accountService.update(account);

    then:

    account.errors.getFieldError("accountType").code == "nullable"

  }

  void "test balance for Null"() {
    given:

    accountTestDataService.loadData()
    Account account = Account.first()
    account.balance = null

    when:

    accountService.update(account);

    then:

    account.errors.getFieldError("balance").code == "nullable"
  }

  void "test branch for Null"() {
    given:

    accountTestDataService.loadData()
    Account account = Account.first()
    account.branch = null

    when:

    accountService.update(account);

    then:

    account.errors.getFieldError("branch").code == "nullable"
  }

  void "test accountNumber for Null"() {
    given:

    accountTestDataService.loadData()
    Account account = Account.first()
    account.accountNumber = null

    when:

    accountService.update(account);

    then:

    account.errors.getFieldError("accountNumber").code == "nullable"

  }

  void "test checkOverdraftAllowed"() {
    given:

    customerTestDataService.loadData()

    Customer customer = Customer.first()
    CustomerLevel customerLevel = customer.customerLevel
    Account account = customer.account
    User user = customer.user

    when:

    customerLevel.overdraftAllowed = true
    customerLevelService.update(customerLevel)

    Boolean allowed = accountService.checkOverdraftAllowed(user, account)

    then:

    allowed
  }

  void "test not checkOverdraftAllowed"() {
    given:

    customerTestDataService.loadData()

    Customer customer = Customer.first()
    CustomerLevel customerLevel = customer.customerLevel
    Account account = customer.account
    User user = customer.user

    when:

    customerLevel.overdraftAllowed = false
    customerLevelService.update(customerLevel)

    Boolean allowed = accountService.checkOverdraftAllowed(user, account)

    then:

    !allowed
  }
}
    